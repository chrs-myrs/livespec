# Internalise Learnings

<ultrathink>
I need to analyze THIS current conversation to extract learnings for [PROJECT NAME].

[GENERATOR INSERTS: Project principles, spec structure, update workflow]

Project principles to reinforce:
1. [PRINCIPLE 1 FROM constitution.spec.md]
2. [PRINCIPLE 2 FROM constitution.spec.md]
3. [PRINCIPLE 3 FROM constitution.spec.md]

Specification structure:
[GENERATOR LISTS ACTUAL SPEC FOLDERS]

I will scan THIS conversation for:
- Corrections to my assumptions
- Clarifications about [PROJECT-SPECIFIC CONCERNS]
- Patterns that emerged during work
- Anti-patterns I should avoid
- Knowledge gaps that caused issues

Then map learnings to appropriate specifications.
</ultrathink>

## Execution

### Phase 1: Conversation Analysis

Scanning THIS conversation for learnings (not pre-filled examples)...

**Reading conversation history to identify:**

#### 1.1 User Corrections

Look for moments where user said:
- "Actually, it should be..."
- "No, the correct approach is..."
- "That's not quite right..."
- "Let me clarify..."

**Extract:**
- What assumption was incorrect?
- What is the correct understanding?
- Why does this matter for this project?

#### 1.2 Clarification Requests

Look for:
- Questions I asked that revealed ambiguity
- Areas where user provided additional context
- Specifications that weren't clear enough
- Missing documentation discovered

**Extract:**
- What was unclear?
- What clarification was provided?
- Where should this be documented?

#### 1.3 Discovered Patterns

Look for:
- Patterns that emerged during implementation
- Conventions user reinforced repeatedly
- Best practices demonstrated in code/specs
- Workflows that proved effective

**Extract:**
- What pattern was demonstrated?
- Why is it valuable?
- Where should it be codified?

#### 1.4 Anti-Patterns Identified

Look for:
- Approaches user steered me away from
- Mistakes made and corrected
- Violations of project principles
- Inefficiencies encountered

**Extract:**
- What was the anti-pattern?
- Why is it problematic?
- What principle does it violate?

### Phase 2: Learning Classification

**Mapping learnings to specification structure:**

[GENERATOR INSERTS ACTUAL SPEC TAXONOMY]

**Process Learnings** (→ specs/workspace/):
- About how we work
- Development principles
- Coding conventions
- Workflow processes

**Mission Learnings** (→ specs/mission/):
- High-level requirements refined
- New constraints identified
- Outcomes clarified
- Boundaries adjusted

**Strategy Learnings** (→ specs/strategy/):
- Architectural insights
- Cross-cutting decisions
- Technical approach refined
- Design patterns validated

**Behavior Learnings** (→ specs/behaviors/):
- New behaviors discovered
- Existing behaviors clarified
- Validation criteria refined
- Edge cases identified

**Contract Learnings** (→ specs/contracts/):
- Interface changes needed
- API contracts refined
- Data format updates
- Integration points clarified

### Phase 3: Spec Update Recommendations

For each learning identified, propose specific update:

**Learning 1: [DESCRIPTION FROM ACTUAL CONVERSATION]**
- **Type**: [Correction | Clarification | Pattern | Anti-pattern]
- **Target Spec**: [SPECIFIC FILE PATH]
- **Update Type**: [New spec | Update existing | Add validation | Add example]
- **Specific Change**:
  ```markdown
  [ACTUAL CONTENT TO ADD/MODIFY IN SPEC]
  ```
- **Rationale**: [Why this prevents future mistakes]
- **Validation**: [How to verify learning is applied]

**Learning 2: [DESCRIPTION FROM ACTUAL CONVERSATION]**
- **Type**: [Correction | Clarification | Pattern | Anti-pattern]
- **Target Spec**: [SPECIFIC FILE PATH]
- **Update Type**: [New spec | Update existing | Add validation | Add example]
- **Specific Change**:
  ```markdown
  [ACTUAL CONTENT TO ADD/MODIFY IN SPEC]
  ```
- **Rationale**: [Why this prevents future mistakes]
- **Validation**: [How to verify learning is applied]

[CONTINUE FOR ALL LEARNINGS IDENTIFIED]

### Phase 4: Implementation Plan

[GENERATOR INSERTS PROJECT-SPECIFIC WORKFLOW FROM workflows.spec.md]

**Steps to capture learnings:**

1. **Review Recommendations Above**
   - Validate each learning is accurate
   - Prioritize by impact (which prevents most mistakes?)
   - Group by target spec location

2. **Create/Update Specifications**
   - Follow MSL format: [FROM patterns.spec.md]
   - Use correct criticality: [CRITICAL | IMPORTANT only]
   - Define failure mode: [What breaks without this?]
   - Add validation criteria: [How to verify?]

3. **Validate Changes**
   - Check against principles: [FROM constitution.spec.md]
   - Verify MSL minimalism: [Is this essential?]
   - Test that learning prevents repetition
   - Update frontmatter dependencies if needed

4. **Propagate Learning**
   - Update related specs if needed
   - Add examples to patterns.spec.md if pattern
   - Update workflows.spec.md if process learning
   - Regenerate AGENTS.md if workspace specs changed

### Phase 5: Prevent Repetition

**Creating feedback loop:**

1. **Document in Specs**
   - Implement recommended updates above
   - Make learning explicit in specifications
   - Add validation that catches violation

2. **Update Agent Configuration**
   - If workspace specs changed: Regenerate AGENTS.md
   ```bash
   # If you updated specs/workspace/*
   # Consider regenerating agent config
   ```

3. **Validate Integration**
   - Test that documented learning is enforced
   - Verify agent uses updated specs
   - Confirm anti-pattern is preventable

## Learning Summary

**Patterns Recognized:** [FROM THIS CONVERSATION]
- [PATTERN 1 - ACTUAL FROM CONVERSATION]
- [PATTERN 2 - ACTUAL FROM CONVERSATION]
- [PATTERN 3 - ACTUAL FROM CONVERSATION]

**Spec Updates Needed:**
- [FILE 1: SPECIFIC CHANGE]
- [FILE 2: SPECIFIC CHANGE]
- [FILE 3: SPECIFIC CHANGE]

**Principles Reinforced:** [FROM constitution.spec.md]
- [PRINCIPLE 1 AND HOW IT WAS DEMONSTRATED]
- [PRINCIPLE 2 AND HOW IT WAS DEMONSTRATED]
- [PRINCIPLE 3 AND HOW IT WAS DEMONSTRATED]

**Anti-Patterns Avoided:**
- [ANTI-PATTERN 1 IDENTIFIED IN CONVERSATION]
- [ANTI-PATTERN 2 IDENTIFIED IN CONVERSATION]

**Next Actions:**
1. [HIGHEST PRIORITY SPEC UPDATE]
2. [SECOND PRIORITY SPEC UPDATE]
3. [VALIDATION STEP]

**Validation:**
- [ ] All learnings documented in appropriate specs
- [ ] MSL minimalism maintained (only essential requirements)
- [ ] Validation criteria added (how to verify compliance)
- [ ] Frontmatter dependencies updated if needed
- [ ] AGENTS.md regenerated if workspace specs changed

These learnings are now integrated into project specifications and will prevent repeated mistakes in future conversations.
